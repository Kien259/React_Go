// Code generated by ent, DO NOT EDIT.

package ent

import (
	"4th_Assignment/ent/contactsubmission"
	"4th_Assignment/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactSubmissionUpdate is the builder for updating ContactSubmission entities.
type ContactSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *ContactSubmissionMutation
}

// Where appends a list predicates to the ContactSubmissionUpdate builder.
func (csu *ContactSubmissionUpdate) Where(ps ...predicate.ContactSubmission) *ContactSubmissionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetName sets the "name" field.
func (csu *ContactSubmissionUpdate) SetName(s string) *ContactSubmissionUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillableName(s *string) *ContactSubmissionUpdate {
	if s != nil {
		csu.SetName(*s)
	}
	return csu
}

// SetPhone sets the "phone" field.
func (csu *ContactSubmissionUpdate) SetPhone(s string) *ContactSubmissionUpdate {
	csu.mutation.SetPhone(s)
	return csu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillablePhone(s *string) *ContactSubmissionUpdate {
	if s != nil {
		csu.SetPhone(*s)
	}
	return csu
}

// SetEmail sets the "email" field.
func (csu *ContactSubmissionUpdate) SetEmail(s string) *ContactSubmissionUpdate {
	csu.mutation.SetEmail(s)
	return csu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillableEmail(s *string) *ContactSubmissionUpdate {
	if s != nil {
		csu.SetEmail(*s)
	}
	return csu
}

// SetSubject sets the "subject" field.
func (csu *ContactSubmissionUpdate) SetSubject(s string) *ContactSubmissionUpdate {
	csu.mutation.SetSubject(s)
	return csu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillableSubject(s *string) *ContactSubmissionUpdate {
	if s != nil {
		csu.SetSubject(*s)
	}
	return csu
}

// SetMessage sets the "message" field.
func (csu *ContactSubmissionUpdate) SetMessage(s string) *ContactSubmissionUpdate {
	csu.mutation.SetMessage(s)
	return csu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillableMessage(s *string) *ContactSubmissionUpdate {
	if s != nil {
		csu.SetMessage(*s)
	}
	return csu
}

// SetSubmittedAt sets the "submitted_at" field.
func (csu *ContactSubmissionUpdate) SetSubmittedAt(t time.Time) *ContactSubmissionUpdate {
	csu.mutation.SetSubmittedAt(t)
	return csu
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (csu *ContactSubmissionUpdate) SetNillableSubmittedAt(t *time.Time) *ContactSubmissionUpdate {
	if t != nil {
		csu.SetSubmittedAt(*t)
	}
	return csu
}

// Mutation returns the ContactSubmissionMutation object of the builder.
func (csu *ContactSubmissionUpdate) Mutation() *ContactSubmissionMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ContactSubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ContactSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ContactSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ContactSubmissionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *ContactSubmissionUpdate) check() error {
	if v, ok := csu.mutation.Name(); ok {
		if err := contactsubmission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.name": %w`, err)}
		}
	}
	if v, ok := csu.mutation.Phone(); ok {
		if err := contactsubmission.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.phone": %w`, err)}
		}
	}
	if v, ok := csu.mutation.Email(); ok {
		if err := contactsubmission.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.email": %w`, err)}
		}
	}
	if v, ok := csu.mutation.Subject(); ok {
		if err := contactsubmission.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.subject": %w`, err)}
		}
	}
	if v, ok := csu.mutation.Message(); ok {
		if err := contactsubmission.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.message": %w`, err)}
		}
	}
	return nil
}

func (csu *ContactSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactsubmission.Table, contactsubmission.Columns, sqlgraph.NewFieldSpec(contactsubmission.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.SetField(contactsubmission.FieldName, field.TypeString, value)
	}
	if value, ok := csu.mutation.Phone(); ok {
		_spec.SetField(contactsubmission.FieldPhone, field.TypeString, value)
	}
	if value, ok := csu.mutation.Email(); ok {
		_spec.SetField(contactsubmission.FieldEmail, field.TypeString, value)
	}
	if value, ok := csu.mutation.Subject(); ok {
		_spec.SetField(contactsubmission.FieldSubject, field.TypeString, value)
	}
	if value, ok := csu.mutation.Message(); ok {
		_spec.SetField(contactsubmission.FieldMessage, field.TypeString, value)
	}
	if value, ok := csu.mutation.SubmittedAt(); ok {
		_spec.SetField(contactsubmission.FieldSubmittedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ContactSubmissionUpdateOne is the builder for updating a single ContactSubmission entity.
type ContactSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactSubmissionMutation
}

// SetName sets the "name" field.
func (csuo *ContactSubmissionUpdateOne) SetName(s string) *ContactSubmissionUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillableName(s *string) *ContactSubmissionUpdateOne {
	if s != nil {
		csuo.SetName(*s)
	}
	return csuo
}

// SetPhone sets the "phone" field.
func (csuo *ContactSubmissionUpdateOne) SetPhone(s string) *ContactSubmissionUpdateOne {
	csuo.mutation.SetPhone(s)
	return csuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillablePhone(s *string) *ContactSubmissionUpdateOne {
	if s != nil {
		csuo.SetPhone(*s)
	}
	return csuo
}

// SetEmail sets the "email" field.
func (csuo *ContactSubmissionUpdateOne) SetEmail(s string) *ContactSubmissionUpdateOne {
	csuo.mutation.SetEmail(s)
	return csuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillableEmail(s *string) *ContactSubmissionUpdateOne {
	if s != nil {
		csuo.SetEmail(*s)
	}
	return csuo
}

// SetSubject sets the "subject" field.
func (csuo *ContactSubmissionUpdateOne) SetSubject(s string) *ContactSubmissionUpdateOne {
	csuo.mutation.SetSubject(s)
	return csuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillableSubject(s *string) *ContactSubmissionUpdateOne {
	if s != nil {
		csuo.SetSubject(*s)
	}
	return csuo
}

// SetMessage sets the "message" field.
func (csuo *ContactSubmissionUpdateOne) SetMessage(s string) *ContactSubmissionUpdateOne {
	csuo.mutation.SetMessage(s)
	return csuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillableMessage(s *string) *ContactSubmissionUpdateOne {
	if s != nil {
		csuo.SetMessage(*s)
	}
	return csuo
}

// SetSubmittedAt sets the "submitted_at" field.
func (csuo *ContactSubmissionUpdateOne) SetSubmittedAt(t time.Time) *ContactSubmissionUpdateOne {
	csuo.mutation.SetSubmittedAt(t)
	return csuo
}

// SetNillableSubmittedAt sets the "submitted_at" field if the given value is not nil.
func (csuo *ContactSubmissionUpdateOne) SetNillableSubmittedAt(t *time.Time) *ContactSubmissionUpdateOne {
	if t != nil {
		csuo.SetSubmittedAt(*t)
	}
	return csuo
}

// Mutation returns the ContactSubmissionMutation object of the builder.
func (csuo *ContactSubmissionUpdateOne) Mutation() *ContactSubmissionMutation {
	return csuo.mutation
}

// Where appends a list predicates to the ContactSubmissionUpdate builder.
func (csuo *ContactSubmissionUpdateOne) Where(ps ...predicate.ContactSubmission) *ContactSubmissionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ContactSubmissionUpdateOne) Select(field string, fields ...string) *ContactSubmissionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ContactSubmission entity.
func (csuo *ContactSubmissionUpdateOne) Save(ctx context.Context) (*ContactSubmission, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ContactSubmissionUpdateOne) SaveX(ctx context.Context) *ContactSubmission {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ContactSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ContactSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *ContactSubmissionUpdateOne) check() error {
	if v, ok := csuo.mutation.Name(); ok {
		if err := contactsubmission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.name": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.Phone(); ok {
		if err := contactsubmission.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.phone": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.Email(); ok {
		if err := contactsubmission.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.email": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.Subject(); ok {
		if err := contactsubmission.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.subject": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.Message(); ok {
		if err := contactsubmission.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "ContactSubmission.message": %w`, err)}
		}
	}
	return nil
}

func (csuo *ContactSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *ContactSubmission, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactsubmission.Table, contactsubmission.Columns, sqlgraph.NewFieldSpec(contactsubmission.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactsubmission.FieldID)
		for _, f := range fields {
			if !contactsubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Name(); ok {
		_spec.SetField(contactsubmission.FieldName, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Phone(); ok {
		_spec.SetField(contactsubmission.FieldPhone, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Email(); ok {
		_spec.SetField(contactsubmission.FieldEmail, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Subject(); ok {
		_spec.SetField(contactsubmission.FieldSubject, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Message(); ok {
		_spec.SetField(contactsubmission.FieldMessage, field.TypeString, value)
	}
	if value, ok := csuo.mutation.SubmittedAt(); ok {
		_spec.SetField(contactsubmission.FieldSubmittedAt, field.TypeTime, value)
	}
	_node = &ContactSubmission{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
