// Code generated by ent, DO NOT EDIT.

package contactsubmission

import (
	"4th_Assignment/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldEmail, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldSubject, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldMessage, v))
}

// SubmittedAt applies equality check predicate on the "submitted_at" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldSubmittedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContainsFold(FieldEmail, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContainsFold(FieldSubject, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldContainsFold(FieldMessage, v))
}

// SubmittedAtEQ applies the EQ predicate on the "submitted_at" field.
func SubmittedAtEQ(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submitted_at" field.
func SubmittedAtNEQ(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submitted_at" field.
func SubmittedAtIn(vs ...time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submitted_at" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submitted_at" field.
func SubmittedAtGT(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submitted_at" field.
func SubmittedAtGTE(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submitted_at" field.
func SubmittedAtLT(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submitted_at" field.
func SubmittedAtLTE(v time.Time) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.FieldLTE(FieldSubmittedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContactSubmission) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContactSubmission) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContactSubmission) predicate.ContactSubmission {
	return predicate.ContactSubmission(sql.NotPredicates(p))
}
